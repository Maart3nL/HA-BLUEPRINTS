blueprint:
  name: ZHA - IKEA Styrbar - Switch scenes
  description: Control a light with white spectrum and dimming via a Ikea Styrbar
    Remote connected trough ZHA
  domain: automation
  input:
    remote:
      name: IKEA Styrbar remote control
      description: Select the remote control you wish to use.
      selector:
        device:
          integration: zha
          manufacturer: IKEA of Sweden
          model: Remote Control N2
          multiple: false
    light:
      name: Light
      description: Select the light entity which has all the lights to power off
      selector:
        entity:
          domain:
          - light
          multiple: false
    brightness_step:
      name: Brightness Step
      description: Rate at which brightness goes up and down
      default: 2
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
    color_temp_step:
      name: Color Temp Step
      description: Kelvin at which color temperature goes up and down on button hold
      default: 100
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: "kelvin"
    color_temp_step_press:
      name: Color Temp Step On Press
      description: Kelvin at which color temperature goes up and down on button press
      default: 500
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: "kelvin"
    min_color_temp:
      name: Minimum Color Value
      description: Minimum device supported color temperature in Kelvin
      default: 2202
      selector:
        number:
          min: 2000
          max: 6500
          unit_of_measurement: "kelvin"
    max_color_temp:
      name: Maximum Color Value
      description: Maximum device supported color temperature in Kelvin
      default: 4000
      selector:
        number:
          min: 2000
          max: 6500
          unit_of_measurement: "kelvin"
    transition_time:
      name: Transition time
      description: Time in seconds in which transitions happen 
      default: 0.5
      selector:
        number:
          min: 0.0
          max: 5.0
          step: 0.1
          unit_of_measurement: seconds
    included_scenes:
      name: Included Scenes
      description: Additional scenes to be included
      default: []
      selector:
        entity:
          filter:
            domain: scene
          multiple: true
  source_url: https://community.home-assistant.io/t/zha-ikea-styrbar-warm-white-lights/341688
mode: restart
max_exceeded: silent
variables:
  var_light: !input light
  var_brightness_step: !input brightness_step
  var_color_temp_step: !input color_temp_step
  var_color_temp_step_press: !input color_temp_step_press
  var_min_color_temp: !input min_color_temp
  var_max_color_temp: !input max_color_temp
  var_transition_time: !input transition_time
  included_scenes: !input "included_scenes"
trigger:
- platform: event
  event_type: zha_event
  event_data:
    device_id: !input remote
action:
- choose:
  - conditions:
    - condition: template
      value_template: '{{ trigger.event.data.command == "on" }}'
    sequence:
    - service: scene.turn_on
      data_template:
        transition: !input transition_time
        entity_id: >
          {% set all_scenes = (included_scenes | list) %}
          {% set scenes_sorted_by_activation = expand(all_scenes) | sort(attribute='state', reverse = true) | map(attribute='entity_id') | list %}
          {% set last_activated_scene = scenes_sorted_by_activation[0] %}
          {% set index_of_last_activated_scene = all_scenes.index(last_activated_scene) %}
          {% if is_state(var_light,'on') %}
            {% set new_index = index_of_last_activated_scene + 1 %}
          {% else %}
            {% set new_index = index_of_last_activated_scene %}
          {% endif %}
          {% if new_index == all_scenes | count %}
            {{ all_scenes[0] }}
          {% else %}
            {{ all_scenes[new_index] }}
          {% endif %}
  - conditions:
    - condition: template
      value_template: '{{ trigger.event.data.command == "off" }}'
    sequence:
    - service: light.turn_off
      target:
        entity_id: !input light
  - conditions:
    - condition: template
      value_template: '{{ trigger.event.data.command == "move_with_on_off" }}'
    sequence:
    - repeat:
        while: []
        sequence:
        - service: light.turn_on
          target:
            entity_id: >
              {% set all_scenes = (included_scenes | list) %}
              {% set scenes_sorted_by_activation = expand(all_scenes) | sort(attribute='state', reverse = true) | map(attribute='entity_id') | list %}
              {% set last_activated_scene = scenes_sorted_by_activation[0] %}
              {% set scene_entities = state_attr(last_activated_scene, 'entity_id') %}
              {% for entity in scene_entities %}
                {% if 'light.' in entity and states(entity) == 'on' %}
                  {{ entity }}
                {% endif %}
              {% endfor %}
          data:
            brightness_step_pct: !input brightness_step
            transition: !input transition_time
        - delay:
            milliseconds: "{{ var_transition_time * 1000 }}"
  - conditions:
    - condition: template
      value_template: '{{ trigger.event.data.command == "move" }}'
    sequence:
    - repeat:
        while: []
        sequence:
        - service: light.turn_on
          target:
            entity_id: >
              {% set all_scenes = (included_scenes | list) %}
              {% set scenes_sorted_by_activation = expand(all_scenes) | sort(attribute='state', reverse = true) | map(attribute='entity_id') | list %}
              {% set last_activated_scene = scenes_sorted_by_activation[0] %}
              {% set scene_entities = state_attr(last_activated_scene, 'entity_id') %}
              {% for entity in scene_entities %}
                {% if 'light.' in entity and states(entity) == 'on' %}
                  {{ entity }}
                {% endif %}
              {% endfor %}
          data:
            brightness_step_pct: "-{{ var_brightness_step }}"
            transition: !input transition_time
        - delay:
            milliseconds: "{{ var_transition_time * 1000 }}"
  - conditions:
    - condition: template
      value_template: '{{ trigger.event.data.command == "press" }}'
    - condition: template
      value_template: '{{ trigger.event.data.args == [256,13,0] }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: >
          {% set all_scenes = (included_scenes | list) %}
          {% set scenes_sorted_by_activation = expand(all_scenes) | sort(attribute='state', reverse = true) | map(attribute='entity_id') | list %}
          {% set last_activated_scene = scenes_sorted_by_activation[0] %}
          {% set scene_entities = state_attr(last_activated_scene, 'entity_id') %}
          {% for entity in scene_entities %}
            {% if 'light.' in entity and states(entity) == 'on' %}
              {{ entity }}
            {% endif %}
          {% endfor %}
      data:
        color_temp_kelvin: '{{ max(state_attr(var_light, "color_temp_kelvin") - var_color_temp_step_press, var_min_color_temp) }}'
        transition: !input transition_time
  - conditions:
    - condition: template
      value_template: '{{ trigger.event.data.command == "hold" }}'
    - condition: template
      value_template: '{{ trigger.event.data.args == [3328,0] }}'
    sequence:
    - repeat:
        while: []
        sequence:
        - service: light.turn_on
          target:
            entity_id: >
              {% set all_scenes = (included_scenes | list) %}
              {% set scenes_sorted_by_activation = expand(all_scenes) | sort(attribute='state', reverse = true) | map(attribute='entity_id') | list %}
              {% set last_activated_scene = scenes_sorted_by_activation[0] %}
              {% set scene_entities = state_attr(last_activated_scene, 'entity_id') %}
              {% for entity in scene_entities %}
                {% if 'light.' in entity and states(entity) == 'on' %}
                  {{ entity }}
                {% endif %}
              {% endfor %}
          data:
            color_temp_kelvin: '{{ max(state_attr(var_light, "color_temp_kelvin") - var_color_temp_step, var_min_color_temp) }}'
            transition: !input transition_time
        - delay:
            milliseconds: "{{ var_transition_time * 1000 }}"
  - conditions:
    - condition: template
      value_template: '{{ trigger.event.data.command == "press" }}'
    - condition: template
      value_template: '{{ trigger.event.data.args == [257,13,0] }}'
    sequence:
    - service: light.turn_on
      target:
        entity_id: >
          {% set all_scenes = (included_scenes | list) %}
          {% set scenes_sorted_by_activation = expand(all_scenes) | sort(attribute='state', reverse = true) | map(attribute='entity_id') | list %}
          {% set last_activated_scene = scenes_sorted_by_activation[0] %}
          {% set scene_entities = state_attr(last_activated_scene, 'entity_id') %}
          {% for entity in scene_entities %}
            {% if 'light.' in entity and states(entity) == 'on' %}
              {{ entity }}
            {% endif %}
          {% endfor %}
      data:
        color_temp_kelvin: '{{ min(state_attr(var_light, "color_temp_kelvin") + var_color_temp_step_press, var_max_color_temp) }}'
        transition: !input transition_time

  - conditions:
    - condition: template
      value_template: '{{ trigger.event.data.command == "hold" }}'
    - condition: template
      value_template: '{{ trigger.event.data.args == [3329,0] }}'
    sequence:
    - repeat:
        while: []
        sequence:
        - service: light.turn_on
          target:
            entity_id: >
              {% set all_scenes = (included_scenes | list) %}
              {% set scenes_sorted_by_activation = expand(all_scenes) | sort(attribute='state', reverse = true) | map(attribute='entity_id') | list %}
              {% set last_activated_scene = scenes_sorted_by_activation[0] %}
              {% set scene_entities = state_attr(last_activated_scene, 'entity_id') %}
              {% for entity in scene_entities %}
                {% if 'light.' in entity and states(entity) == 'on' %}
                  {{ entity }}
                {% endif %}
              {% endfor %}
          data:
            color_temp_kelvin: '{{ min(state_attr(var_light, "color_temp_kelvin") + var_color_temp_step, var_max_color_temp) }}'
            transition: !input transition_time
        - delay:
            milliseconds: "{{ var_transition_time * 1000 }}"
  default: []
